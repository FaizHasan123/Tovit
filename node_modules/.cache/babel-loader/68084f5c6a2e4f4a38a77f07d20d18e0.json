{"ast":null,"code":"var _jsxFileName = \"/Users/faiz.hasan@ibm.com/Downloads/Tovit-master/src/App.js\";\nimport React, { Fragment } from 'react';\nimport { Component } from 'react';\nimport './App.css';\nimport { NavLink, Switch, Route } from 'react-router-dom';\nimport mainLogo from \"./image/tovit_logo.svg\";\nimport FadeIn from \"react-fade-in\";\nimport axios from 'axios';\nimport renderHTML from 'react-render-html';\nimport Supplies from './Supplies';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nconst App = () => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"app\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 7\n  }\n}, \"Tovit\"), /*#__PURE__*/React.createElement(Navigation, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(Main, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(Supplies, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(Dashboard, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 7\n  }\n}));\n\nconst Navigation = () => /*#__PURE__*/React.createElement(\"nav\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"ul\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"li\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(NavLink, {\n  exact: true,\n  activeClassName: \"current\",\n  to: \"/Dashboard\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 13\n  }\n}, \"Dashboard\")), /*#__PURE__*/React.createElement(\"li\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(NavLink, {\n  exact: true,\n  activeClassName: \"current\",\n  to: \"/ContactTracing\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 13\n  }\n}, \"Contact Tracing\")), /*#__PURE__*/React.createElement(\"li\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(NavLink, {\n  exact: true,\n  activeClassName: \"current\",\n  to: \"/Supplies\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 13\n  }\n}, \"Supplies\")), /*#__PURE__*/React.createElement(\"li\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(NavLink, {\n  exact: true,\n  activeClassName: \"current\",\n  to: \"/Chatbot\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 13\n  }\n}, \"Chatbot\"))));\n\nconst Main = () => /*#__PURE__*/React.createElement(Switch, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Route, {\n  exact: true,\n  path: \"/Dashboard\",\n  component: Dashboard,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  exact: true,\n  path: \"/ContactTracing\",\n  component: ContactTracing,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  exact: true,\n  path: \"/Supplies\",\n  component: Supplies,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  exact: true,\n  path: \"/Chatbot\",\n  component: Chatbot,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 7\n  }\n}));\n\nconst Dashboard = () => renderHTML(\"<!doctype html>\\\n    <html lang=\\\"en\\\">\\\n      <head>\\\n        <script async src=\\\"https://www.googletagmanager.com/gtag/js?id=UA-155058741-2\\\"></script>\\\n        <script>\\\n          window.dataLayer = window.dataLayer || [];\\\n          function gtag(){dataLayer.push(arguments);}\\\n          gtag('js', new Date());\\\n          gtag('config', 'UA-155058741-2');\\\n        </script>\\\n        <meta charset=\\\"utf-8\\\">\\\n        <link rel=\\\"shortcut icon\\\" href=\\\"favicon.ico\\\" type=\\\"image/x-icon\\\">\\\n        <link rel=\\\"icon\\\" href=\\\"favicon.ico\\\" type=\\\"image/x-icon\\\">\\\n        <title>COVID-19 Dashboard</title>\\\n        <meta name=\\\"description\\\" content=\\\"Coronavirus (COVID-19) dashboard to show the dynamics of Ð¡oronavirus distribution per country\\\">\\\n        <meta name=\\\"author\\\" content=\\\"Oleksii Trekhleb\\\">\\\n        <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\\n        <script src=\\\"https://kit.fontawesome.com/4add81f750.js\\\" crossorigin=\\\"anonymous\\\"></script>\\\n        <link\\\n          rel=\\\"stylesheet\\\"\\\n          href=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\\\"\\\n          integrity=\\\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\\\"\\\n          crossorigin=\\\"anonymous\\\"\\\n        >\\\n        <link\\\n          rel=\\\"stylesheet\\\"\\\n          href=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.css\\\"\\\n          crossorigin=\\\"anonymous\\\"\\\n        >\\\n        <link rel=\\\"stylesheet\\\" href=\\\"./css/index.css\\\">\\\n      </head>\\\n      <body>\\\n        <div class=\\\"container-fluid\\\">\\\n          <div class=\\\"row mb-1\\\">\\\n            <div class=\\\"col-sm\\\">\\\n              <nav class=\\\"navbar navbar-expand-sm navbar-dark bg-dark\\\">\\\n                <div class=\\\"navbar-brand mb-0 h1\\\">\\\n                  <i class=\\\"fas fa-chart-bar\\\"></i> <a class=\\\"navbar-brand\\\" href=\\\"https://trekhleb.github.io/covid-19/\\\">COVID-19 Dashboard</a>\\\n                </div>\\\n                <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarNav\\\" aria-controls=\\\"navbarNav\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\\n                  <span class=\\\"navbar-toggler-icon\\\"></span>\\\n                </button>\\\n                <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarNav\\\">\\\n                  <ul class=\\\"navbar-nav ml-auto\\\">\\\n                    <li class=\\\"nav-item\\\">\\\n                      <a class=\\\"nav-link\\\" href=\\\"https://www.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\\\">\\\n                        <i class=\\\"fas fa-globe-americas\\\"></i> JHU Dashboard\\\n                      </a>\\\n                    </li>\\\n                  </ul>\\\n                </div>\\\n              </nav>\\\n            </div>\\\n          </div>\\\n          <div class=\\\"row mb-1\\\">\\\n            <div class=\\\"col-sm\\\">\\\n              <div id=\\\"root\\\"></div>\\\n            </div>\\\n          </div>\\\n          <div class=\\\"row mb-4\\\">\\\n            <div class=\\\"col-sm\\\">\\\n              <small class=\\\"text-secondary text-nowrap mr-3\\\">\\\n                <i class=\\\"fas fa-table\\\"></i> Data source: <a href=\\\"https://github.com/CSSEGISandData/COVID-19\\\" class=\\\"text-dark\\\">COVID-19 Data Repository by JHU CSSE</a>\\\n              </small>\\\n              <small class=\\\"text-secondary text-nowrap mr-3\\\">\\\n                <i class=\\\"fas fa-bug\\\"></i> <a href=\\\"https://github.com/trekhleb/covid-19/issues\\\" class=\\\"text-dark\\\">Report issue</a>\\\n              </small>\\\n              <small class=\\\"text-secondary text-nowrap mr-3\\\">\\\n                <i class=\\\"fab fa-github\\\"></i> <a href=\\\"https://github.com/trekhleb/covid-19/\\\" class=\\\"text-dark\\\">Contribute</a>\\\n              </small>\\\n            </div>\\\n          </div>\\\n        </div>\\\n        <script src=\\\"https://unpkg.com/react@16/umd/react.development.js\\\" crossorigin></script>\\\n        <script src=\\\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\\\" crossorigin></script>\\\n        <script\\\n          src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\\\"\\\n          crossorigin=\\\"anonymous\\\"\\\n        ></script>\\\n        <script\\\n          src=\\\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\\\"\\\n          integrity=\\\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\\\"\\\n          crossorigin=\\\"anonymous\\\"\\\n        ></script>\\\n        <script\\\n          src=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\\\"\\\n          integrity=\\\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\\\"\\\n          crossorigin=\\\"anonymous\\\"\\\n        ></script>\\\n        <script src=\\\"https://unpkg.com/papaparse@5.1.1/papaparse.min.js\\\" crossorigin></script>\\\n        <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\\\" crossorigin></script>\\\n        <script src=\\\"./js/dashboard/utils.js\\\"></script>\\\n        <script>alert()\\\n        const covidSchema = {\\\n          headerRow: 0,\\\n          stateColumn: 0,\\\n          countryColumn: 1,\\\n          latColumn: 2,\\\n          lonColumn: 3,\\\n          dateStartColumn: 4,\\\n          };\\\n        const covidDataBaseURL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series';\\\n        const confirmedPalette = ['#FF9F40', '#703600', '#D66700', '#FF800A', '#A34E00'];\\\n        const recoveredPalette = ['#4BC0C0', '#1D5353', '#379E9E', '#4BC0C0', '#2A7878'];\\\n        const deathsPalette = ['#FF6384', '#93001D', '#F90031', '#FF2D57', '#C60027'];\\\n        const covidDataTypes = {\\\n          confirmed: {\\\n            key: 'confirmed',\\\n            title: 'Confirmed',\\\n            dataSourceUrl: `${covidDataBaseURL}/time_series_covid19_confirmed_global.csv`,\\\n            borderColor: confirmedPalette,\\\n            alertClass: 'alert-warning',\\\n            badgeClass: 'badge-warning',\\\n          },\\\n          recovered: {\\\n            key: 'recovered',\\\n            title: 'Recovered',\\\n            dataSourceUrl: `${covidDataBaseURL}/time_series_covid19_recovered_global.csv`,\\\n            borderColor: recoveredPalette,\\\n            alertClass: 'alert-success',\\\n            badgeClass: 'badge-success',\\\n          },\\\n          deaths: {\\\n            key: 'deaths',\\\n            title: 'Deaths',\\\n            dataSourceUrl: `${covidDataBaseURL}/time_series_covid19_deaths_global.csv`,\\\n            borderColor: deathsPalette,\\\n            alertClass: 'alert-danger',\\\n            badgeClass: 'badge-danger',\\\n          },\\\n          };\\\n        const covidCountries = {\\\n          all: {\\\n            key: 'Global',\\\n            title: 'Global',\\\n            index: -1,\\\n          }\\\n          };\\\n        const covidSorts = {\\\n          country: {\\\n            key: 'country',\\\n          },\\\n          confirmed: {\\\n            key: 'confirmed',\\\n            dataKey: covidDataTypes.confirmed.key,\\\n          },\\\n          recovered: {\\\n            key: 'recovered',\\\n            dataKey: covidDataTypes.recovered.key,\\\n          },\\\n          deaths: {\\\n            key: 'deaths',\\\n            dataKey: covidDataTypes.deaths.key,\\\n          },\\\n          mortality: {\\\n            key: 'mortality',\\\n          },\\\n          };\\\n        const covidSortDirections = {\\\n          asc: {\\\n            key: 'asc',\\\n          },\\\n          desc: {\\\n            key: 'desc',\\\n          },\\\n          };\\\n        const covidFilters = {\\\n          selectedTypes: {\\\n            key: 'selectedTypes',\\\n            defaultValue: Object.keys(covidDataTypes),\\\n          },\\\n          groupByCountry: {\\\n            key: 'groupByCountry',\\\n            defaultValue: true,\\\n          },\\\n          selectedRegions: {\\\n            key: 'selectedRegions',\\\n            defaultValue: [covidCountries.all.key]\\\n          },\\\n          useLogScale: {\\\n            key: 'useLogScale',\\\n            defaultValue: false,\\\n          },\\\n          countrySearchQuery: {\\\n            key: 'countrySearchQuery',\\\n            defaultValue: '',\\\n          },\\\n          dataSort: {\\\n            key: 'dataSort',\\\n            defaultValue: covidSorts.confirmed.key,\\\n          },\\\n          dataSortDirection: {\\\n            key: 'dataSortDirection',\\\n            defaultValue: covidSortDirections.desc.key,\\\n          },\\\n          };\\\n        function loadCovidData() {\\\n          const defaultDataContainer = {\\\n            labels: [],\\\n            ticks: {},\\\n          };\\\n          return Promise\\\n            .all(Object.values(covidDataTypes).map(\\\n              dataType => fetch(dataType.dataSourceUrl)\\\n            ))\\\n            .then(responses => Promise.all(\\\n              responses.map(response => response.text())\\\n            ))\\\n            .then(dataTypesTicks => {\\\n              return dataTypesTicks.reduce(\\\n                (dataContainer, dataTypeTicksCSV, dataTypeIndex) => {\\\n                  const dataType = Object.keys(covidDataTypes)[dataTypeIndex];\\\n                  const dataTypeTicks = Papa.parse(dataTypeTicksCSV).data;\\\n                  dataContainer.labels = dataTypeTicks.shift();\\\n                  dataContainer.ticks[dataType] = dataTypeTicks\\\n                    .filter(regionTicks => {\\\n                      return regionTicks.length === dataContainer.labels.length;\\\n                    })\\\n                    .map(regionTicks => {\\\n                      return regionTicks.map((regionTick, tickIndex) => {\\\n                        if (tickIndex < covidSchema.dateStartColumn) {\\\n                          return regionTick;\\\n                        }\\\n                        if (!regionTick) {\\\n                          return 0;\\\n                        }\\\n                        return parseInt(regionTick, 10);\\\n                      });\\\n                    })\\\n                    .sort((regionTicksA, regionTicksB) => {\\\n                      const regionNameA = getRegionKey(regionTicksA);\\\n                      const regionNameB = getRegionKey(regionTicksB);\\\n                      if (regionNameA > regionNameB) {\\\n                        return 1;\\\n                      } else if (regionNameA < regionNameB) {\\\n                        return -1;\\\n                      }\\\n                      return 0;\\\n                    });\\\n                  return dataContainer;\\\n                },\\\n                defaultDataContainer\\\n              );\\\n            });\\\n            }\\\n        function getRegionKey(regionTicks) {\\\n          if (!regionTicks || !regionTicks.length) {\\\n            return null;\\\n          }\\\n          const country = regionTicks[covidSchema.countryColumn];\\\n          const state = regionTicks[covidSchema.stateColumn];\\\n          return state ? `${country} - ${state}` : `${country}`;\\\n          }\\\n        function getRegionIndexByKey(covidData, dataTypeKey, regionKey) {\\\n          return covidData.ticks[dataTypeKey].findIndex(\\\n            regionTicks => getRegionKey(regionTicks) === regionKey\\\n          );\\\n          }\\\n        function getRegionByKey(covidData, dataTypeKey, regionKey) {\\\n          const regionIndex = getRegionIndexByKey(covidData, dataTypeKey, regionKey);\\\n          return covidData.ticks[dataTypeKey][regionIndex];\\\n          }\\\n        function getGlobalTicks(covidData, dataTypeKey) {\\\n          const totalTicks = covidData.ticks[dataTypeKey][0].length;\\\n          const globalTicks = new Array(totalTicks).fill(0);\\\n          globalTicks[covidSchema.stateColumn] = '';\\\n          globalTicks[covidSchema.countryColumn] = covidCountries.all.title;\\\n          globalTicks[covidSchema.latColumn] = '';\\\n          globalTicks[covidSchema.lonColumn] = '';\\\n          covidData.ticks[dataTypeKey].forEach(regionTicks => {\\\n            regionTicks.forEach((regionTick, tickIndex) => {\\\n              if (tickIndex < covidSchema.dateStartColumn) {\\\n                return;\\\n              }\\\n              globalTicks[tickIndex] += regionTick;\\\n            });\\\n          });\\\n          return globalTicks;\\\n          }\\\n        function getTotalCount(covidData, dataTypeKey, regionKeys) {\\\n          if (regionKeys.includes(covidCountries.all.key)) {\\\n            const globalTicks = getGlobalTicks(covidData, dataTypeKey);\\\n            return globalTicks[globalTicks.length - 1];\\\n          }\\\n          return regionKeys.reduce((total, regionKey) => {\\\n            const regionTicks = getRegionByKey(covidData, dataTypeKey, regionKey);\\\n            if (!regionTicks) {\\\n              return total;\\\n            }\\\n            total += regionTicks[regionTicks.length - 1];\\\n            return total;\\\n          }, 0);\\\n          }\\\n        function searchRegionTicks(covidData, dataTypeKey, regionKey) {\\\n          if (!regionKey) {\\\n            return null;\\\n          }\\\n          const regionsTicks = covidData.ticks[dataTypeKey];\\\n          return regionsTicks.find((regionTicks) => getRegionKey(regionTicks) === regionKey);\\\n          }\\\n        function getCovidRegions(covidData) {\\\n          return covidData.ticks[covidDataTypes.confirmed.key]\\\n            .map((regionTicks, regionIndex) => {\\\n              const key = getRegionKey(regionTicks);\\\n              const numbers = {};\\\n              Object.values(covidDataTypes).forEach((covidDataType) => {\\\n                const regionTicksOfType = covidData.ticks[covidDataType.key][regionIndex];\\\n                const regionKeyOfType = getRegionKey(regionTicksOfType);\\\n                if (regionTicksOfType && regionTicksOfType.length === regionTicks.length && regionKeyOfType && regionKeyOfType === key) {\\\n                  numbers[covidDataType.key] = regionTicksOfType[regionTicksOfType.length - 1];\\\n                } else {\\\n                  const foundRegionTicks = searchRegionTicks(covidData, covidDataType.key, key);\\\n                  if (foundRegionTicks && foundRegionTicks.length === regionTicks.length) {\\\n                    numbers[covidDataType.key] = foundRegionTicks[foundRegionTicks.length - 1];\\\n                  } else {\\\n                    numbers[covidDataType.key] = -1;\\\n                  }\\\n                }\\\n              });\\\n              return {key, numbers};\\\n            });\\\n            }\\\n        function getLastUpdatedDate(covidData) {\\\n          const dateLabel = covidData.labels[covidData.labels.length - 1];\\\n          return formatDateLabel(dateLabel);\\\n          }\\\n        function formatDateLabel(dateLabel) {\\\n          const date = new Date(dateLabel);\\\n          const options = {month: 'short', day: '2-digit'};\\\n          return date.toLocaleDateString('en-US', options);\\\n          }\\\n        function groupCovidDataByCountries(covidData) {\\\n          const covidDataByCountries = {\\\n            labels: [],\\\n            ticks: {},\\\n          };\\\n          covidDataByCountries.labels = [...covidData.labels];\\\n          Object.values(covidDataTypes).forEach((covidDataType) => {\\\n            covidDataByCountries.ticks[covidDataType.key] = Object.values(covidData.ticks[covidDataType.key]\\\n              .reduce((countriesTicksMap, regionTicks) => {\\\n                const countryName = regionTicks[covidSchema.countryColumn];\\\n                if (!countriesTicksMap[countryName]) {\\\n                  countriesTicksMap[countryName] = [...regionTicks];\\\n                  countriesTicksMap[countryName][covidSchema.stateColumn] = '';\\\n                  return countriesTicksMap;\\\n                }\\\n                for (let columnIndex = covidSchema.dateStartColumn; columnIndex < regionTicks.length; columnIndex += 1) {\\\n                  countriesTicksMap[countryName][columnIndex] += regionTicks[columnIndex];\\\n                }\\\n                return countriesTicksMap;\\\n              }, {}));\\\n          });\\\n          return covidDataByCountries;\\\n          }\\\n        function filterToUrl(filterKey, filterValue) {\\\n          try {\\\n            const url = new URL(document.location);\\\n            url.searchParams.set(filterKey, JSON.stringify(filterValue));\\\n            history.pushState(null, null, url.href);\\\n          } catch (e) {\\\n            console.error('Cannot send filters to URL');\\\n          }\\\n          }\\\n        function filtersFromUrl() {\\\n          const filtersInUrl = {};\\\n          try {\\\n            const url = new URL(document.location);\\\n            Object.values(covidFilters).forEach((covidFilter) => {\\\n              if (url.searchParams.has(covidFilter.key)) {\\\n                filtersInUrl[covidFilter.key] = JSON.parse(\\\n                  url.searchParams.get(covidFilter.key)\\\n                );\\\n              }\\\n            });\\\n          } catch (e) {\\\n            console.error('Cannot fetch filters from URL');\\\n          }\\\n          return filtersInUrl;\\\n          }\\\n        function deleteFiltersFromUrl() {\\\n          try {\\\n            const url = new URL(document.location);\\\n            Object.values(covidFilters).forEach((covidFilter) => {\\\n              url.searchParams.delete(covidFilter.key);\\\n            });\\\n            history.pushState(null, null, url.href);\\\n          } catch (e) {\\\n            console.error('Cannot delete filters from URL');\\\n          }\\\n          }\\\n        function calculateMortality(confirmedNumber, deathsNumber) {\\\n          if (confirmedNumber === 0) {\\\n            return 0;\\\n          }\\\n          const mortality = deathsNumber / confirmedNumber;\\\n          if (mortality < 0) {\\\n            return 0;\\\n          }\\\n          return Math.floor(1000 * mortality) / 10;\\\n          }\\\n        </script>\\\n        <script src=\\\"./js/dashboard/index.js\\\"></script>\\\n      </body>\\\n      </html>\\\n    \"); // const Home = () => (\n//   <FadeIn>\n//     <div className=\"root\">\n//         <img src={mainLogo}/>\n//     </div>\n//   </FadeIn>\n// );\n\n\nconst ContactTracing = () => {}; // const Supplies = () => {\n//   <Supplies/>\n// };\n\n\nconst Chatbot = () => {\n  const demoWatson = () => {\n    window.loadWatsonAssistantChat({\n      integrationID: \"5bd1bb25-2d16-40f8-abb3-fa92f8829d63\",\n      // The ID of this integration.\n      region: \"eu-gb\",\n      // The region your integration is hosted in.\n      serviceInstanceID: \"a513e694-d417-4035-a972-26d6d679c99c\" // The ID of your service instance.\n      // onLoad: function(instance) { instance.render(); }\n\n    }).then(function (instance) {\n      instance.render();\n    });\n  };\n\n  demoWatson(); // <div className='Supplies'>\n  //   <h1>About Me</h1>\n  //   <p>Ipsum dolor dolorem consectetur est velit fugiat. Dolorem provident corporis fuga saepe distinctio ipsam? Et quos harum excepturi dolorum molestias?</p>\n  //   <p>Ipsum dolor dolorem consectetur est velit fugiat. Dolorem provident corporis fuga saepe distinctio ipsam? Et quos harum excepturi dolorum molestias?</p>\n  // </div>\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/faiz.hasan@ibm.com/Downloads/Tovit-master/src/App.js"],"names":["React","Fragment","Component","NavLink","Switch","Route","FadeIn","axios","renderHTML","Supplies","ReactHtmlParser","processNodes","convertNodeToElement","htmlparser2","App","Navigation","Main","Dashboard","ContactTracing","Chatbot","demoWatson","window","loadWatsonAssistantChat","integrationID","region","serviceInstanceID","then","instance","render"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Component } from 'react';\nimport './App.css';\nimport { NavLink, Switch, Route } from 'react-router-dom';\nimport mainLogo from'./image/tovit_logo.svg';\nimport FadeIn from \"react-fade-in\";\nimport axios from 'axios'\nimport renderHTML from 'react-render-html';\nimport Supplies from './Supplies'\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\n\n  const App = () => (\n    <div className='app'>\n      <h1>Tovit</h1>\n      <Navigation />\n      <Main />\n      <Supplies />\n      <Dashboard />\n    </div>\n  );\n  \n\n  const Navigation = () => (\n    <nav>\n      <ul>\n        <li><NavLink exact activeClassName=\"current\" to='/Dashboard'>Dashboard</NavLink></li>\n        <li><NavLink exact activeClassName=\"current\" to='/ContactTracing'>Contact Tracing</NavLink></li>\n        <li><NavLink exact activeClassName=\"current\" to='/Supplies'>Supplies</NavLink></li>\n        <li><NavLink exact activeClassName=\"current\" to='/Chatbot'>Chatbot</NavLink></li>\n      </ul>\n    </nav>\n  );\n\n  const Main = () => (\n    <Switch>\n      {/* <Route path='/' component={Home}></Route> */}\n      <Route exact path='/Dashboard' component={Dashboard}></Route>\n      <Route exact path='/ContactTracing' component={ContactTracing}></Route>\n      <Route exact path='/Supplies' component={Supplies}></Route>\n      <Route exact path='/Chatbot' component={Chatbot}></Route>\n    </Switch>\n  );\n\n  const Dashboard = () =>(\n\n    renderHTML(\"<!doctype html>\\\n    <html lang=\\\"en\\\">\\\n      <head>\\\n        <script async src=\\\"https://www.googletagmanager.com/gtag/js?id=UA-155058741-2\\\"></script>\\\n        <script>\\\n          window.dataLayer = window.dataLayer || [];\\\n          function gtag(){dataLayer.push(arguments);}\\\n          gtag('js', new Date());\\\n          gtag('config', 'UA-155058741-2');\\\n        </script>\\\n        <meta charset=\\\"utf-8\\\">\\\n        <link rel=\\\"shortcut icon\\\" href=\\\"favicon.ico\\\" type=\\\"image/x-icon\\\">\\\n        <link rel=\\\"icon\\\" href=\\\"favicon.ico\\\" type=\\\"image/x-icon\\\">\\\n        <title>COVID-19 Dashboard</title>\\\n        <meta name=\\\"description\\\" content=\\\"Coronavirus (COVID-19) dashboard to show the dynamics of Ð¡oronavirus distribution per country\\\">\\\n        <meta name=\\\"author\\\" content=\\\"Oleksii Trekhleb\\\">\\\n        <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\\n        <script src=\\\"https://kit.fontawesome.com/4add81f750.js\\\" crossorigin=\\\"anonymous\\\"></script>\\\n        <link\\\n          rel=\\\"stylesheet\\\"\\\n          href=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\\\"\\\n          integrity=\\\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\\\"\\\n          crossorigin=\\\"anonymous\\\"\\\n        >\\\n        <link\\\n          rel=\\\"stylesheet\\\"\\\n          href=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.css\\\"\\\n          crossorigin=\\\"anonymous\\\"\\\n        >\\\n        <link rel=\\\"stylesheet\\\" href=\\\"./css/index.css\\\">\\\n      </head>\\\n      <body>\\\n        <div class=\\\"container-fluid\\\">\\\n          <div class=\\\"row mb-1\\\">\\\n            <div class=\\\"col-sm\\\">\\\n              <nav class=\\\"navbar navbar-expand-sm navbar-dark bg-dark\\\">\\\n                <div class=\\\"navbar-brand mb-0 h1\\\">\\\n                  <i class=\\\"fas fa-chart-bar\\\"></i> <a class=\\\"navbar-brand\\\" href=\\\"https://trekhleb.github.io/covid-19/\\\">COVID-19 Dashboard</a>\\\n                </div>\\\n                <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarNav\\\" aria-controls=\\\"navbarNav\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\\n                  <span class=\\\"navbar-toggler-icon\\\"></span>\\\n                </button>\\\n                <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarNav\\\">\\\n                  <ul class=\\\"navbar-nav ml-auto\\\">\\\n                    <li class=\\\"nav-item\\\">\\\n                      <a class=\\\"nav-link\\\" href=\\\"https://www.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\\\">\\\n                        <i class=\\\"fas fa-globe-americas\\\"></i> JHU Dashboard\\\n                      </a>\\\n                    </li>\\\n                  </ul>\\\n                </div>\\\n              </nav>\\\n            </div>\\\n          </div>\\\n          <div class=\\\"row mb-1\\\">\\\n            <div class=\\\"col-sm\\\">\\\n              <div id=\\\"root\\\"></div>\\\n            </div>\\\n          </div>\\\n          <div class=\\\"row mb-4\\\">\\\n            <div class=\\\"col-sm\\\">\\\n              <small class=\\\"text-secondary text-nowrap mr-3\\\">\\\n                <i class=\\\"fas fa-table\\\"></i> Data source: <a href=\\\"https://github.com/CSSEGISandData/COVID-19\\\" class=\\\"text-dark\\\">COVID-19 Data Repository by JHU CSSE</a>\\\n              </small>\\\n              <small class=\\\"text-secondary text-nowrap mr-3\\\">\\\n                <i class=\\\"fas fa-bug\\\"></i> <a href=\\\"https://github.com/trekhleb/covid-19/issues\\\" class=\\\"text-dark\\\">Report issue</a>\\\n              </small>\\\n              <small class=\\\"text-secondary text-nowrap mr-3\\\">\\\n                <i class=\\\"fab fa-github\\\"></i> <a href=\\\"https://github.com/trekhleb/covid-19/\\\" class=\\\"text-dark\\\">Contribute</a>\\\n              </small>\\\n            </div>\\\n          </div>\\\n        </div>\\\n        <script src=\\\"https://unpkg.com/react@16/umd/react.development.js\\\" crossorigin></script>\\\n        <script src=\\\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\\\" crossorigin></script>\\\n        <script\\\n          src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\\\"\\\n          crossorigin=\\\"anonymous\\\"\\\n        ></script>\\\n        <script\\\n          src=\\\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\\\"\\\n          integrity=\\\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\\\"\\\n          crossorigin=\\\"anonymous\\\"\\\n        ></script>\\\n        <script\\\n          src=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\\\"\\\n          integrity=\\\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\\\"\\\n          crossorigin=\\\"anonymous\\\"\\\n        ></script>\\\n        <script src=\\\"https://unpkg.com/papaparse@5.1.1/papaparse.min.js\\\" crossorigin></script>\\\n        <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\\\" crossorigin></script>\\\n        <script src=\\\"./js/dashboard/utils.js\\\"></script>\\\n        <script>alert()\\\n        const covidSchema = {\\\n          headerRow: 0,\\\n          stateColumn: 0,\\\n          countryColumn: 1,\\\n          latColumn: 2,\\\n          lonColumn: 3,\\\n          dateStartColumn: 4,\\\n          };\\\n        const covidDataBaseURL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series';\\\n        const confirmedPalette = ['#FF9F40', '#703600', '#D66700', '#FF800A', '#A34E00'];\\\n        const recoveredPalette = ['#4BC0C0', '#1D5353', '#379E9E', '#4BC0C0', '#2A7878'];\\\n        const deathsPalette = ['#FF6384', '#93001D', '#F90031', '#FF2D57', '#C60027'];\\\n        const covidDataTypes = {\\\n          confirmed: {\\\n            key: 'confirmed',\\\n            title: 'Confirmed',\\\n            dataSourceUrl: `${covidDataBaseURL}/time_series_covid19_confirmed_global.csv`,\\\n            borderColor: confirmedPalette,\\\n            alertClass: 'alert-warning',\\\n            badgeClass: 'badge-warning',\\\n          },\\\n          recovered: {\\\n            key: 'recovered',\\\n            title: 'Recovered',\\\n            dataSourceUrl: `${covidDataBaseURL}/time_series_covid19_recovered_global.csv`,\\\n            borderColor: recoveredPalette,\\\n            alertClass: 'alert-success',\\\n            badgeClass: 'badge-success',\\\n          },\\\n          deaths: {\\\n            key: 'deaths',\\\n            title: 'Deaths',\\\n            dataSourceUrl: `${covidDataBaseURL}/time_series_covid19_deaths_global.csv`,\\\n            borderColor: deathsPalette,\\\n            alertClass: 'alert-danger',\\\n            badgeClass: 'badge-danger',\\\n          },\\\n          };\\\n        const covidCountries = {\\\n          all: {\\\n            key: 'Global',\\\n            title: 'Global',\\\n            index: -1,\\\n          }\\\n          };\\\n        const covidSorts = {\\\n          country: {\\\n            key: 'country',\\\n          },\\\n          confirmed: {\\\n            key: 'confirmed',\\\n            dataKey: covidDataTypes.confirmed.key,\\\n          },\\\n          recovered: {\\\n            key: 'recovered',\\\n            dataKey: covidDataTypes.recovered.key,\\\n          },\\\n          deaths: {\\\n            key: 'deaths',\\\n            dataKey: covidDataTypes.deaths.key,\\\n          },\\\n          mortality: {\\\n            key: 'mortality',\\\n          },\\\n          };\\\n        const covidSortDirections = {\\\n          asc: {\\\n            key: 'asc',\\\n          },\\\n          desc: {\\\n            key: 'desc',\\\n          },\\\n          };\\\n        const covidFilters = {\\\n          selectedTypes: {\\\n            key: 'selectedTypes',\\\n            defaultValue: Object.keys(covidDataTypes),\\\n          },\\\n          groupByCountry: {\\\n            key: 'groupByCountry',\\\n            defaultValue: true,\\\n          },\\\n          selectedRegions: {\\\n            key: 'selectedRegions',\\\n            defaultValue: [covidCountries.all.key]\\\n          },\\\n          useLogScale: {\\\n            key: 'useLogScale',\\\n            defaultValue: false,\\\n          },\\\n          countrySearchQuery: {\\\n            key: 'countrySearchQuery',\\\n            defaultValue: '',\\\n          },\\\n          dataSort: {\\\n            key: 'dataSort',\\\n            defaultValue: covidSorts.confirmed.key,\\\n          },\\\n          dataSortDirection: {\\\n            key: 'dataSortDirection',\\\n            defaultValue: covidSortDirections.desc.key,\\\n          },\\\n          };\\\n        function loadCovidData() {\\\n          const defaultDataContainer = {\\\n            labels: [],\\\n            ticks: {},\\\n          };\\\n          return Promise\\\n            .all(Object.values(covidDataTypes).map(\\\n              dataType => fetch(dataType.dataSourceUrl)\\\n            ))\\\n            .then(responses => Promise.all(\\\n              responses.map(response => response.text())\\\n            ))\\\n            .then(dataTypesTicks => {\\\n              return dataTypesTicks.reduce(\\\n                (dataContainer, dataTypeTicksCSV, dataTypeIndex) => {\\\n                  const dataType = Object.keys(covidDataTypes)[dataTypeIndex];\\\n                  const dataTypeTicks = Papa.parse(dataTypeTicksCSV).data;\\\n                  dataContainer.labels = dataTypeTicks.shift();\\\n                  dataContainer.ticks[dataType] = dataTypeTicks\\\n                    .filter(regionTicks => {\\\n                      return regionTicks.length === dataContainer.labels.length;\\\n                    })\\\n                    .map(regionTicks => {\\\n                      return regionTicks.map((regionTick, tickIndex) => {\\\n                        if (tickIndex < covidSchema.dateStartColumn) {\\\n                          return regionTick;\\\n                        }\\\n                        if (!regionTick) {\\\n                          return 0;\\\n                        }\\\n                        return parseInt(regionTick, 10);\\\n                      });\\\n                    })\\\n                    .sort((regionTicksA, regionTicksB) => {\\\n                      const regionNameA = getRegionKey(regionTicksA);\\\n                      const regionNameB = getRegionKey(regionTicksB);\\\n                      if (regionNameA > regionNameB) {\\\n                        return 1;\\\n                      } else if (regionNameA < regionNameB) {\\\n                        return -1;\\\n                      }\\\n                      return 0;\\\n                    });\\\n                  return dataContainer;\\\n                },\\\n                defaultDataContainer\\\n              );\\\n            });\\\n            }\\\n        function getRegionKey(regionTicks) {\\\n          if (!regionTicks || !regionTicks.length) {\\\n            return null;\\\n          }\\\n          const country = regionTicks[covidSchema.countryColumn];\\\n          const state = regionTicks[covidSchema.stateColumn];\\\n          return state ? `${country} - ${state}` : `${country}`;\\\n          }\\\n        function getRegionIndexByKey(covidData, dataTypeKey, regionKey) {\\\n          return covidData.ticks[dataTypeKey].findIndex(\\\n            regionTicks => getRegionKey(regionTicks) === regionKey\\\n          );\\\n          }\\\n        function getRegionByKey(covidData, dataTypeKey, regionKey) {\\\n          const regionIndex = getRegionIndexByKey(covidData, dataTypeKey, regionKey);\\\n          return covidData.ticks[dataTypeKey][regionIndex];\\\n          }\\\n        function getGlobalTicks(covidData, dataTypeKey) {\\\n          const totalTicks = covidData.ticks[dataTypeKey][0].length;\\\n          const globalTicks = new Array(totalTicks).fill(0);\\\n          globalTicks[covidSchema.stateColumn] = '';\\\n          globalTicks[covidSchema.countryColumn] = covidCountries.all.title;\\\n          globalTicks[covidSchema.latColumn] = '';\\\n          globalTicks[covidSchema.lonColumn] = '';\\\n          covidData.ticks[dataTypeKey].forEach(regionTicks => {\\\n            regionTicks.forEach((regionTick, tickIndex) => {\\\n              if (tickIndex < covidSchema.dateStartColumn) {\\\n                return;\\\n              }\\\n              globalTicks[tickIndex] += regionTick;\\\n            });\\\n          });\\\n          return globalTicks;\\\n          }\\\n        function getTotalCount(covidData, dataTypeKey, regionKeys) {\\\n          if (regionKeys.includes(covidCountries.all.key)) {\\\n            const globalTicks = getGlobalTicks(covidData, dataTypeKey);\\\n            return globalTicks[globalTicks.length - 1];\\\n          }\\\n          return regionKeys.reduce((total, regionKey) => {\\\n            const regionTicks = getRegionByKey(covidData, dataTypeKey, regionKey);\\\n            if (!regionTicks) {\\\n              return total;\\\n            }\\\n            total += regionTicks[regionTicks.length - 1];\\\n            return total;\\\n          }, 0);\\\n          }\\\n        function searchRegionTicks(covidData, dataTypeKey, regionKey) {\\\n          if (!regionKey) {\\\n            return null;\\\n          }\\\n          const regionsTicks = covidData.ticks[dataTypeKey];\\\n          return regionsTicks.find((regionTicks) => getRegionKey(regionTicks) === regionKey);\\\n          }\\\n        function getCovidRegions(covidData) {\\\n          return covidData.ticks[covidDataTypes.confirmed.key]\\\n            .map((regionTicks, regionIndex) => {\\\n              const key = getRegionKey(regionTicks);\\\n              const numbers = {};\\\n              Object.values(covidDataTypes).forEach((covidDataType) => {\\\n                const regionTicksOfType = covidData.ticks[covidDataType.key][regionIndex];\\\n                const regionKeyOfType = getRegionKey(regionTicksOfType);\\\n                if (regionTicksOfType && regionTicksOfType.length === regionTicks.length && regionKeyOfType && regionKeyOfType === key) {\\\n                  numbers[covidDataType.key] = regionTicksOfType[regionTicksOfType.length - 1];\\\n                } else {\\\n                  const foundRegionTicks = searchRegionTicks(covidData, covidDataType.key, key);\\\n                  if (foundRegionTicks && foundRegionTicks.length === regionTicks.length) {\\\n                    numbers[covidDataType.key] = foundRegionTicks[foundRegionTicks.length - 1];\\\n                  } else {\\\n                    numbers[covidDataType.key] = -1;\\\n                  }\\\n                }\\\n              });\\\n              return {key, numbers};\\\n            });\\\n            }\\\n        function getLastUpdatedDate(covidData) {\\\n          const dateLabel = covidData.labels[covidData.labels.length - 1];\\\n          return formatDateLabel(dateLabel);\\\n          }\\\n        function formatDateLabel(dateLabel) {\\\n          const date = new Date(dateLabel);\\\n          const options = {month: 'short', day: '2-digit'};\\\n          return date.toLocaleDateString('en-US', options);\\\n          }\\\n        function groupCovidDataByCountries(covidData) {\\\n          const covidDataByCountries = {\\\n            labels: [],\\\n            ticks: {},\\\n          };\\\n          covidDataByCountries.labels = [...covidData.labels];\\\n          Object.values(covidDataTypes).forEach((covidDataType) => {\\\n            covidDataByCountries.ticks[covidDataType.key] = Object.values(covidData.ticks[covidDataType.key]\\\n              .reduce((countriesTicksMap, regionTicks) => {\\\n                const countryName = regionTicks[covidSchema.countryColumn];\\\n                if (!countriesTicksMap[countryName]) {\\\n                  countriesTicksMap[countryName] = [...regionTicks];\\\n                  countriesTicksMap[countryName][covidSchema.stateColumn] = '';\\\n                  return countriesTicksMap;\\\n                }\\\n                for (let columnIndex = covidSchema.dateStartColumn; columnIndex < regionTicks.length; columnIndex += 1) {\\\n                  countriesTicksMap[countryName][columnIndex] += regionTicks[columnIndex];\\\n                }\\\n                return countriesTicksMap;\\\n              }, {}));\\\n          });\\\n          return covidDataByCountries;\\\n          }\\\n        function filterToUrl(filterKey, filterValue) {\\\n          try {\\\n            const url = new URL(document.location);\\\n            url.searchParams.set(filterKey, JSON.stringify(filterValue));\\\n            history.pushState(null, null, url.href);\\\n          } catch (e) {\\\n            console.error('Cannot send filters to URL');\\\n          }\\\n          }\\\n        function filtersFromUrl() {\\\n          const filtersInUrl = {};\\\n          try {\\\n            const url = new URL(document.location);\\\n            Object.values(covidFilters).forEach((covidFilter) => {\\\n              if (url.searchParams.has(covidFilter.key)) {\\\n                filtersInUrl[covidFilter.key] = JSON.parse(\\\n                  url.searchParams.get(covidFilter.key)\\\n                );\\\n              }\\\n            });\\\n          } catch (e) {\\\n            console.error('Cannot fetch filters from URL');\\\n          }\\\n          return filtersInUrl;\\\n          }\\\n        function deleteFiltersFromUrl() {\\\n          try {\\\n            const url = new URL(document.location);\\\n            Object.values(covidFilters).forEach((covidFilter) => {\\\n              url.searchParams.delete(covidFilter.key);\\\n            });\\\n            history.pushState(null, null, url.href);\\\n          } catch (e) {\\\n            console.error('Cannot delete filters from URL');\\\n          }\\\n          }\\\n        function calculateMortality(confirmedNumber, deathsNumber) {\\\n          if (confirmedNumber === 0) {\\\n            return 0;\\\n          }\\\n          const mortality = deathsNumber / confirmedNumber;\\\n          if (mortality < 0) {\\\n            return 0;\\\n          }\\\n          return Math.floor(1000 * mortality) / 10;\\\n          }\\\n        </script>\\\n        <script src=\\\"./js/dashboard/index.js\\\"></script>\\\n      </body>\\\n      </html>\\\n    \")\n    );\n\n  // const Home = () => (\n  //   <FadeIn>\n  //     <div className=\"root\">\n  //         <img src={mainLogo}/>\n  //     </div>\n  //   </FadeIn>\n  // );\n  \n  \n  const ContactTracing = () => {\n    \n  \n  }; \n  \n  // const Supplies = () => {\n  //   <Supplies/>\n  // };\n\n  const Chatbot = () => {\n    const demoWatson = () => {\n      window.loadWatsonAssistantChat({\n        integrationID: \"5bd1bb25-2d16-40f8-abb3-fa92f8829d63\", // The ID of this integration.\n        region: \"eu-gb\", // The region your integration is hosted in.\n        serviceInstanceID: \"a513e694-d417-4035-a972-26d6d679c99c\" // The ID of your service instance.\n        // onLoad: function(instance) { instance.render(); }\n      }).then(function(instance){\n        instance.render();\n      }\n      );\n    }\n    demoWatson()\n    // <div className='Supplies'>\n    //   <h1>About Me</h1>\n    //   <p>Ipsum dolor dolorem consectetur est velit fugiat. Dolorem provident corporis fuga saepe distinctio ipsam? Et quos harum excepturi dolorum molestias?</p>\n    //   <p>Ipsum dolor dolorem consectetur est velit fugiat. Dolorem provident corporis fuga saepe distinctio ipsam? Et quos harum excepturi dolorum molestias?</p>\n    // </div>\n  };\n\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}